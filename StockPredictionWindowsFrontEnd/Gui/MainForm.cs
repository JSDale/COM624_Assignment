

namespace Gui
{
    using System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;
    using System.Windows.Forms;

    using CustomEvents;

    using GuiController;

    using MessageBroker;

    /// <summary>
    /// The main form for the application
    /// </summary>
    public partial class MainForm : Form
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainForm"/> class.
        /// </summary>
        public MainForm()
        {
            this.InitializeComponent();
            this.InitEventListeners();
            this.StartConsumer();
        }

        /// <summary>
        /// Starts subscriber for predictions
        /// </summary>
        private void StartConsumer()
        {
            const string HostName = "localhost";
            const string Queue = "resp_stock";
            var consumer = new Consumer(HostName, Queue);
            consumer.Initialize();
            Task.Run(() => consumer.Consume());
        }

        /// <summary>
        /// Initializes the events to run methods when triggered.
        /// </summary>
        private void InitEventListeners()
        {
            UpdateGui.UpdateStockEvent += this.UpdateStockPredictions;
            UpdateGui.UpdateStockEvent += this.UpdateGraph;

        }

        /// <summary>
        /// Updates the GUI to display predictions
        /// </summary>
        /// <param name="stockPrediction">the predictions</param>
        private void UpdateStockPredictions(string stockPrediction)
        {
            if (this.richTextBoxPredictions.InvokeRequired)
            {
                this.richTextBoxPredictions.Invoke((MethodInvoker)delegate
                {
                    var predictions = $"{this.richTextBoxPredictions.Text}\nReceived: {stockPrediction}";
                    this.richTextBoxPredictions.Text = predictions;
                });
            }
            else
            {
                var predictions = $"Received: {this.richTextBoxPredictions.Text}\n {stockPrediction}";
                this.richTextBoxPredictions.Text = predictions;
            }
        }

        /// <summary>
        /// updates the picture box with generated graph of predictions
        /// </summary>
        /// <param name="location">the file path of the graph</param>
        private void UpdateGraph(string location)
        {
            if (this.pictureBoxGraph.InvokeRequired)
            {
                this.pictureBoxGraph.ImageLocation = location;
                this.pictureBoxGraph.SizeMode = PictureBoxSizeMode.StretchImage;
            }
            else
            {
                this.pictureBoxGraph.ImageLocation = location;
                this.pictureBoxGraph.SizeMode = PictureBoxSizeMode.StretchImage;
            }
        }

        /// <summary>
        /// Hooks onto buttonPredict click event
        /// </summary>
        /// <param name="sender">The context</param>
        /// <param name="e">event arguments</param>
        [SuppressMessage("StyleCop.CSharp.NamingRules", "SA1300:ElementMustBeginWithUpperCaseLetter", Justification = "Auto-generated by IDE")]
        private void buttonPredict_Click(object sender, System.EventArgs e)
        {
            var controller = new MakePredictions(this.textBoxEnterTicker.Text, this.comboBoxInfoSource.Text);
            controller.GetPredictions();
        }
    }
}
